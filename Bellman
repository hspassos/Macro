import numpy as np

def production_function(k, alpha):
    return k ** alpha

def bellman_equation(k_grid, alpha, beta, delta):
    num_periods = len(k_grid)
    value_function = [0] * num_periods
    policy_function = [0] * num_periods

    for i in range(num_periods - 1, -1, -1):
        k_t = k_grid[i]

        max_value = float('-inf')
        optimal_k_t1 = None

        for j in range(num_periods):
            k_t1 = k_grid[j]
            c_t = production_function(k_t, alpha) + (1 - delta) * k_t - k_t1

            if c_t <= 0:
                continue

            future_value = beta * value_function[j]
            current_value = beta ** i * (np.log(c_t) + future_value)

            if current_value > max_value:
                max_value = current_value
                optimal_k_t1 = k_t1

        value_function[i] = max_value
        policy_function[i] = optimal_k_t1

    return value_function, policy_function

# Parameters
alpha = 0.3  # Production function parameter
beta = 0.96  # Discount factor
delta = 0.01  # Depreciation rate
num_periods = 50  # Number of periods
k_min = 0.1  # Minimum capital level
k_max = 10.0  # Maximum capital level

# Generate the grid for capital levels
k_grid = np.linspace(k_min, k_max, num_periods)

# Calculate the Bellman equation
value_function, policy_function = bellman_equation(k_grid, alpha, beta, delta)

# Print the results
for i in range(num_periods):
    print(f"Period {i+1}: Value function = {value_function[i]:.4f}, Optimal k_t1 = {policy_function[i]:.4f}")
